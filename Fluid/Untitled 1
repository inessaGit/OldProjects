
WebDriver driver = new FirefoxDriver();
String path="./target/screenshots/"screenshot.png;
File scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
// Now you can do whatever you need to do with it, for example copy somewhere
FileUtils.copyFile(scrFile, new File(path));

    
    NOTES:
    
    1. GIFT BOX OVERLAY is still within main window (no need for switchTo().frame/switchTo().window)
    2. MAXIMIZE WINDOW -
        driver.manage().window().maximize();
    3. 
    By css:
   EXAMPLE:  <div id="food"><span class="dairy">milk</span>     <span class="dairy aged">cheese</span></div>
   WebElement cheese = driver.findElement(By.cssSelector("#food span.dairy.aged"));
   
    
    
    <div class="giftInfo">
<span class="label">This item is a gift for:</span>
<br>
    WebElement giftLabel = driver.findElement(By.cssSelector("div.giftInfo span.label"));
    
    3. 
    
    COUNTRY SELECT
    
    IF USA  - THEN NEED TO SELECT  STATE AND STATE IS MANDATORY
    {
    
    IF ANY OF 48 STATES - THEN SHIPPING HAS 3 OPTIONS
    {
        NESTED IF FOR IF STATE =ALASKA|| HAWAII - THEN SHIPPING 2 OPTIONS
    }
    }
    IF CANADA - THEN PROVINCE AND PROVINCE IS MANDATORY
    {
      
    }
    IF ALL OTHER COUNTRIES - THEN STATE/PROVINCE IS OPTIONAL
    {
    
    }
    
    WebElement checkboxUseAddressForBilling = driver.findElement(By.id("dwfrm_singleshipping_shippingAddress_useAsBillingAddress"));
    ============================================
    
    xpath IDE //div[@id='s2id_dwfrm_singleshipping_shippingAddress_addressFields_country']/a/span; 
    
   WebElement country =  driver.findElement(By.id("dwfrm_singleshipping_shippingAddress_addressFields_country"));
    OR
    WebElement country =driver.findElement(By.cssSelector("a.select2-choice.select2-default > span"));
    country.click();
    country.click();//TO SELECT USA
    
    OR
    
    List<WebElement> countries =driver.findElements(By.className("input-select  country required"));
    Llist<String> htmlCountries= new ArrayList();
    for(int i=0; i<countries.size(); i++)
    {
       WebElement oneCountry = countries.get(i);
       htmlCountries.add(oneCountry.getAttribute("innerHTMML")).trim();
    }
    
            System.out.println ("Number of 'Country'  elements: "+ countries.size());
            
            Iterator it = htmlCountries.iterator();
            while(it.hasNext=true)
            {
              Object elem=it.next();
                    System.out.println("These are countries in the drop down 'Country' list on 'Step 1 Shipping' in 'Checkout' : " + elem);
            
            }
    
    =========================================
    
    ALL SHIPPING OPTIONS LOCATORS:
    
    2 otpions for alaska and hawaii
    ===============================
    WebElement checkboxShippingAH = driver.findElement(By.id("shipping-method-2day_alaska_hawaii"));
    
    checkboxShippingAH.click();
    String selectedShipping = checkboxShippingAH.getAttribute("innerHTML").trim();
    if(checkboxShippingAH.checked()==true)
    {
     System.out.prinln(" 'Checkout Step 1' selected shipping option: " + selectedShipping);
    }
    
    WebElement checkboxShippingAHground = driver.findElement(By.id("shipping-method-ground_alaska_hawaii");
    checkboxShippingAHground.click();
    String selectedShippingAHground = checkboxShippingAHground.getAttribute("innerHTML").trim();
     if(checkboxShippingAHground.checked()==true)
    {
     System.out.prinln(" 'Checkout Step 1' selected shipping option: " + selectedShipping);
    }
    
    =================================================
    48 state:
    WebElement ground = driver.findElement(By.id("shipping-method-ground_48_contiguous_states"));//ONLY LOCATOR//ALREADY CHECKED BY DEFAULT!!
    
    
    WebElement 2day48states=driver.findElement(By.id("shipping-method-2day_48_contiguous_states")) //ONLY LOCATOR
    //to select it 
    
    2day48states.click();
    String selected2day48states = 2day48states.getAttribute("innerHTML").trim();
     if(2day48states.checked()==true)
    {
     System.out.prinln(" 'Checkout Step 1' selected shipping option: " + selected2day48states);
    }
    
    WebElement overnight48states=driver.findElement(By.id("shipping-method-overnight_48_contiguous_states"));
    //to select it 
    overnight48states.clcick();
    String selectedOvernight48states = overnight48states.getAttribute("innerHTML").trim();
     if(overnight48states.checked()==true)
    {
     System.out.prinln(" 'Checkout Step 1' selected shipping option: " + selectedOvernight48states);
     
    }
    
    =====================================================
    All OTHER COUNTRIES
    
    WebElement internationalShipping = driver.findElement(By.id("shipping-method-ClearPath_FEDEX_ECONOMY"));
    
    //SELECTED BY DEFAULT
    
    String selectedInternationalShipping= internationalShipping.getAttribute("innerHTML").trim();
    
    if (internationalShipping.checked()==true)
    {
    
      System.out.prinln(" 'Checkout Step 1' selected shipping option: " + internationalShipping);
    }
    
    =========================================================================
    Step 1 Shipping CONTINUE BUTTON
    
    WebElelment continueBtn = driver.findElement(By.name("dwfrm_singleshipping_shippingAddress_save"));
    Thread.sleep();
    
    
    java.lang.IndexOutOfBoundsException: Index: 1, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:604)
	at java.util.ArrayList.get(ArrayList.java:382)
	at KiplingCommon.KipCommonMethods.selectCountry(KipCommonMethods.java:363)
	at KiplingCommon.KipCommonMethods.testCountry(KipCommonMethods.java:402)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)

